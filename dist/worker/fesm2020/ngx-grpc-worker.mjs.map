{"version":3,"file":"ngx-grpc-worker.mjs","sources":["../../../packages/worker/src/lib/api.ts","../../../packages/worker/src/lib/grpc-worker.ts","../../../packages/worker/src/ngx-grpc-worker.ts"],"sourcesContent":["import { RpcError, Metadata, Status } from 'grpc-web';\nimport { GrpcWorkerClientSettings } from './client-settings';\n\n/* eslint-disable  @typescript-eslint/no-namespace */\nexport namespace GrpcWorkerApi {\n  export enum GrpcWorkerMessageType {\n    serviceClientConfig,\n    rpcRequest,\n    rpcCancel,\n    rpcResponse,\n  }\n\n  export interface GrpcWorkerMessage {\n    type: GrpcWorkerMessageType;\n  }\n\n  export interface GrpcWorkerMessageServiceClientConfig extends GrpcWorkerMessage {\n    type: GrpcWorkerMessageType.serviceClientConfig;\n    serviceId: string;\n    settings: GrpcWorkerClientSettings;\n  }\n\n  export interface GrpcWorkerMessageRPCRequest<Q> extends GrpcWorkerMessage {\n    type: GrpcWorkerMessageType.rpcRequest;\n    id: number;\n    serviceId: string;\n    path: string;\n    request: Q;\n    metadata: Metadata;\n  }\n\n  export interface GrpcWorkerMessageRPCCancel extends GrpcWorkerMessage {\n    type: GrpcWorkerMessageType.rpcCancel;\n    id: number;\n  }\n\n  export enum GrpcWorkerMessageRPCResponseType {\n    error,\n    status,\n    data,\n    end,\n  }\n\n  export interface GrpcWorkerMessageRPCResponse<S> extends GrpcWorkerMessage {\n    type: GrpcWorkerMessageType.rpcResponse;\n    responseType: GrpcWorkerMessageRPCResponseType;\n    id: number;\n    error?: RpcError;\n    status?: Status;\n    response?: S;\n  }\n\n  export interface WorkerMessageEvent<D> extends Event {\n    data: D;\n  }\n}\n","import { GrpcCallType, GrpcMessage } from '@ngx-grpc/common';\nimport { RpcError, GrpcWebClientBase, MethodDescriptor, Status } from 'grpc-web';\nimport { GrpcWorkerApi } from './api';\nimport { GrpcWorkerClientSettings } from './client-settings';\nimport { GrpcWorkerServiceClientDef } from './service-client-def';\n\n/**\n * A worker-side service of worker client implementation based on grpc-web\n *\n * Example:\n *\n * ```\n * /// <reference lib=\"webworker\" />\n *\n * import { GrpcWorker } from '@ngx-grpc/worker';\n * import { GrpcWorkerEchoServiceClientDef } from '../proto/echo.pbwsc';\n *\n * const worker = new GrpcWorker();\n *\n * worker.register(\n *   // register here all the service clients definitions\n *   GrpcWorkerEchoServiceClientDef,\n * );\n *\n * worker.start();\n * ```\n */\nexport class GrpcWorker {\n\n  private definitions = new Map<string, GrpcWorkerServiceClientDef>();\n\n  private clients = new Map<string, {\n    settings: GrpcWorkerClientSettings;\n    client: GrpcWebClientBase;\n  }>();\n\n  private requestCancelHandlers = new Map<number, () => void>();\n\n  /**\n   * Register one or more service clients.\n   * Add here only the services you use, otherwise the worker size can explode.\n   *\n   * @param defs generated service client definitions to register\n   */\n  register(...defs: GrpcWorkerServiceClientDef[]) {\n    defs.forEach(def => this.definitions.set(def.serviceId, def));\n  }\n\n  /**\n   * Start the service\n   */\n  start() {\n    addEventListener('message', ({ data }: GrpcWorkerApi.WorkerMessageEvent<GrpcWorkerApi.GrpcWorkerMessage>) => {\n      switch (data.type) {\n        case GrpcWorkerApi.GrpcWorkerMessageType.serviceClientConfig: this.configureServiceClient(data as GrpcWorkerApi.GrpcWorkerMessageServiceClientConfig); break;\n        case GrpcWorkerApi.GrpcWorkerMessageType.rpcRequest: this.handleRpc(data as GrpcWorkerApi.GrpcWorkerMessageRPCRequest<any>); break;\n        case GrpcWorkerApi.GrpcWorkerMessageType.rpcCancel: this.cancelRpc(data as GrpcWorkerApi.GrpcWorkerMessageRPCCancel); break;\n        default: throw new Error(`Unknown incoming message type ${data.type}`);\n      }\n    });\n  }\n\n  private configureServiceClient(message: GrpcWorkerApi.GrpcWorkerMessageServiceClientConfig) {\n    const def = this.definitions.get(message.serviceId);\n\n    if (!def) {\n      throw new Error(`Service client ${message.serviceId} is not registered in Worker`);\n    }\n\n    this.clients.set(message.serviceId, { settings: message.settings, client: new GrpcWebClientBase(message.settings) });\n  }\n\n  private handleRpc(message: GrpcWorkerApi.GrpcWorkerMessageRPCRequest<any>) {\n    const def = this.definitions.get(message.serviceId);\n\n    if (!def) {\n      throw new Error(`Service client ${message.serviceId} is not registered in Worker`);\n    }\n\n    const service = this.clients.get(message.serviceId);\n\n    if (!service) {\n      throw new Error(`Service client ${message.serviceId} is not configured in Worker`);\n    }\n\n    const respond = (msg: any) => ((postMessage as any)({\n      type: GrpcWorkerApi.GrpcWorkerMessageType.rpcResponse,\n      id: message.id,\n      ...msg,\n    }));\n\n    const { type, reqclss, resclss } = def.methods[message.path];\n    const request = new reqclss(message.request);\n    const url = service.settings.host + message.path;\n    const metadata = message.metadata || {};\n    const descriptor = new MethodDescriptor(\n      message.path,\n      type === GrpcCallType.unary ? 'unary' : 'server_streaming',\n      reqclss,\n      resclss,\n      (req: GrpcMessage) => req.serializeBinary(),\n      resclss.deserializeBinary,\n    );\n\n    if (type === GrpcCallType.unary) {\n      const stream = service.client.rpcCall(url, request, metadata, descriptor, (error, response: GrpcMessage) => {\n        if (error) {\n          this.requestCancelHandlers.delete(message.id);\n          respond({ responseType: GrpcWorkerApi.GrpcWorkerMessageRPCResponseType.error, error });\n        } else {\n          respond({ responseType: GrpcWorkerApi.GrpcWorkerMessageRPCResponseType.data, response: response.toObject() });\n        }\n      });\n\n      // take only status 0 because unary error already includes non-zero statuses\n      stream.on('status', (status: Status) => status.code === 0 ? respond({ responseType: GrpcWorkerApi.GrpcWorkerMessageRPCResponseType.status, status }) : null);\n\n      stream.on('end', () => {\n        this.requestCancelHandlers.delete(message.id);\n        respond({ responseType: GrpcWorkerApi.GrpcWorkerMessageRPCResponseType.end });\n      });\n\n      this.requestCancelHandlers.set(message.id, () => stream.cancel());\n    } else if (type === GrpcCallType.serverStream) {\n      const stream = service.client.serverStreaming(url, request, metadata, descriptor);\n\n      stream.on('error', (error: RpcError) => {\n        this.requestCancelHandlers.delete(message.id);\n        respond({ responseType: GrpcWorkerApi.GrpcWorkerMessageRPCResponseType.error, error });\n      });\n\n      stream.on('status', (status: Status) => respond({ responseType: GrpcWorkerApi.GrpcWorkerMessageRPCResponseType.status, status }));\n\n      stream.on('data', (response: GrpcMessage) => respond({ responseType: GrpcWorkerApi.GrpcWorkerMessageRPCResponseType.data, response: response.toObject() }));\n\n      stream.on('end', () => {\n        this.requestCancelHandlers.delete(message.id);\n        respond({ responseType: GrpcWorkerApi.GrpcWorkerMessageRPCResponseType.end });\n      });\n\n      this.requestCancelHandlers.set(message.id, () => stream.cancel());\n    } else {\n      throw new Error('Client / Bidi stream is not supported');\n    }\n  }\n\n  private cancelRpc(message: GrpcWorkerApi.GrpcWorkerMessageRPCCancel) {\n    const cancel = this.requestCancelHandlers.get(message.id);\n\n    if (cancel) {\n      cancel();\n      this.requestCancelHandlers.delete(message.id);\n    }\n  }\n\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}