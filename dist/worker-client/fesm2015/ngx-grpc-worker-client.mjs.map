{"version":3,"file":"ngx-grpc-worker-client.mjs","sources":["../../../packages/worker-client/src/lib/tokens.ts","../../../packages/worker-client/src/lib/grpc-worker-gateway.ts","../../../packages/worker-client/src/lib/grpc-worker-client.ts","../../../packages/worker-client/src/lib/grpc-worker-client.module.ts","../../../packages/worker-client/src/ngx-grpc-worker-client.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\n\n/**\n * Registers a worker implementation, generated by Angular CLI and implemented according documentation\n *\n * Example:\n *\n * ```\n * providers: [\n *   { provide: GRPC_WORKER, useFactory: () => new Worker('./grpc.worker', { type: 'module' }) },\n * ]\n * ```\n */\nexport const GRPC_WORKER = new InjectionToken<Worker>('GRPC_WORKER');\n\n/**\n * Default configuration for grpc-web clients running in worker. Will be used for every GrpcWorkerClient unless service-specific config is provided\n *\n * Example:\n *\n * ```\n * providers: [\n *   { provide: GRPC_WORKER_CLIENT_DEFAULT_SETTINGS, useClass: { host: 'localhost:4321' } },\n * ]\n * ```\n */\nexport const GRPC_WORKER_CLIENT_DEFAULT_SETTINGS = new InjectionToken('GRPC_WORKER_CLIENT_DEFAULT_SETTINGS');\n","import { Inject, Injectable } from '@angular/core';\nimport { GrpcDataEvent, GrpcEvent, GrpcMessage, GrpcMetadata, GrpcStatusEvent } from '@ngx-grpc/common';\nimport { GrpcWorkerApi } from '@ngx-grpc/worker';\nimport { Metadata } from 'grpc-web';\nimport { Observable, Observer } from 'rxjs';\nimport { GrpcWorkerClientSettings } from './grpc-worker-client';\nimport { GRPC_WORKER } from './tokens';\n\n/** @dynamic */\n@Injectable()\nexport class GrpcWorkerGateway {\n\n  private lastId = 0;\n\n  private connections = new Map<number, Observer<any>>();\n\n  constructor(\n    @Inject(GRPC_WORKER) private worker: Worker,\n  ) {\n    worker.onmessage = (event: MessageEvent) => {\n      const data = event.data as GrpcWorkerApi.GrpcWorkerMessageRPCResponse<any>;\n      const connection = this.connections.get(data.id);\n\n      if (connection && data.type === GrpcWorkerApi.GrpcWorkerMessageType.rpcResponse) {\n        switch (data.responseType) {\n          case GrpcWorkerApi.GrpcWorkerMessageRPCResponseType.error:\n            connection.next(new GrpcStatusEvent(data.error.code, data.error.message, (data.error as any).metadata));\n            connection.complete();\n            this.connections.delete(data.id);\n            break;\n          case GrpcWorkerApi.GrpcWorkerMessageRPCResponseType.status:\n            connection.next(new GrpcStatusEvent(data.status.code, data.status.details, new GrpcMetadata(data.status.metadata)));\n            break;\n          case GrpcWorkerApi.GrpcWorkerMessageRPCResponseType.data:\n            connection.next(new GrpcDataEvent(data.response));\n            break;\n          case GrpcWorkerApi.GrpcWorkerMessageRPCResponseType.end:\n            connection.complete();\n            this.connections.delete(data.id);\n            break;\n        }\n      }\n    };\n  }\n\n  configureServiceClient(serviceId: string, settings: GrpcWorkerClientSettings) {\n    this.worker.postMessage({ type: GrpcWorkerApi.GrpcWorkerMessageType.serviceClientConfig, serviceId, settings } as GrpcWorkerApi.GrpcWorkerMessageServiceClientConfig);\n  }\n\n  callUnaryFromWorker<Q extends GrpcMessage, S extends GrpcMessage>(serviceId: string, path: string, request: Q, metadata: Metadata): Observable<GrpcEvent<S>> {\n    return new Observable(observer => {\n      const id = this.createRequestId();\n\n      this.connections.set(id, observer);\n\n      this.worker.postMessage({\n        type: GrpcWorkerApi.GrpcWorkerMessageType.rpcRequest,\n        id,\n        serviceId,\n        path,\n        request,\n        metadata,\n      } as GrpcWorkerApi.GrpcWorkerMessageRPCRequest<Q>);\n\n      return () => this.closeConnection(id);\n    });\n  }\n\n  callServerStreamFromWorker<Q extends GrpcMessage, S extends GrpcMessage>(serviceId: string, path: string, request: Q, metadata: Metadata): Observable<GrpcEvent<S>> {\n    return new Observable(observer => {\n      const id = this.createRequestId();\n\n      this.connections.set(id, observer);\n\n      this.worker.postMessage({\n        type: GrpcWorkerApi.GrpcWorkerMessageType.rpcRequest,\n        id,\n        serviceId,\n        path,\n        request,\n        metadata,\n      } as GrpcWorkerApi.GrpcWorkerMessageRPCRequest<Q>);\n\n      return () => this.closeConnection(id);\n    });\n  }\n\n  closeConnection(id: number) {\n    this.worker.postMessage({\n      type: GrpcWorkerApi.GrpcWorkerMessageType.rpcCancel,\n      id,\n    } as GrpcWorkerApi.GrpcWorkerMessageRPCCancel);\n\n    this.connections.delete(id);\n  }\n\n  private createRequestId() {\n    return this.lastId++;\n  }\n\n}\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport { GrpcClient, GrpcClientFactory, GrpcDataEvent, GrpcEvent, GrpcMessage, GrpcMessageClass, GrpcMetadata } from '@ngx-grpc/common';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { GrpcWorkerGateway } from './grpc-worker-gateway';\nimport { GRPC_WORKER_CLIENT_DEFAULT_SETTINGS } from './tokens';\n\n/**\n * Settings for the chosen implementation of GrpcClient\n */\nexport interface GrpcWorkerClientSettings {\n  host: string;\n  format?: string;\n  suppressCorsPreflight?: boolean;\n  withCredentials?: boolean;\n}\n\n/**\n * GrpcClientFactory implementation based on grpc-web running in worker\n */\n@Injectable()\nexport class GrpcWorkerClientFactory implements GrpcClientFactory<GrpcWorkerClientSettings> {\n\n  constructor(\n    @Optional() @Inject(GRPC_WORKER_CLIENT_DEFAULT_SETTINGS) private defaultSettings: GrpcWorkerClientSettings,\n    private gateway: GrpcWorkerGateway,\n  ) { }\n\n  createClient(serviceId: string, customSettings: GrpcWorkerClientSettings) {\n    const settings = customSettings || this.defaultSettings;\n\n    if (!settings) {\n      throw new Error(`Worker client factory: no settings provided for ${serviceId}`);\n    }\n\n    return new GrpcWorkerClient(\n      serviceId,\n      { ...settings },\n      this.gateway,\n    );\n  }\n\n}\n\n/**\n * GrpcClient implementation based on grpc-web running in worker\n */\nexport class GrpcWorkerClient implements GrpcClient<GrpcWorkerClientSettings> {\n\n  constructor(\n    private serviceId: string,\n    private settings: GrpcWorkerClientSettings,\n    private gateway: GrpcWorkerGateway,\n  ) {\n    this.gateway.configureServiceClient(this.serviceId, this.settings);\n  }\n\n  getSettings(): GrpcWorkerClientSettings {\n    return { ...this.settings };\n  }\n\n  unary<Q extends GrpcMessage, S extends GrpcMessage>(\n    path: string,\n    req: Q,\n    metadata: GrpcMetadata,\n    reqclss: GrpcMessageClass<Q>,\n    resclss: GrpcMessageClass<S>,\n  ): Observable<GrpcEvent<S>> {\n    return this.gateway\n      .callUnaryFromWorker<Q, S>(this.serviceId, path, req.toObject(), metadata?.toObject() ?? {})\n      .pipe(\n        tap(res => {\n          if (res instanceof GrpcDataEvent) {\n            res.data = new resclss(res.data as any);\n          }\n        }),\n      );\n  }\n\n  serverStream<Q extends GrpcMessage, S extends GrpcMessage>(\n    path: string,\n    req: Q,\n    metadata: GrpcMetadata,\n    reqclss: GrpcMessageClass<Q>,\n    resclss: GrpcMessageClass<S>,\n  ): Observable<GrpcEvent<S>> {\n    return this.gateway\n      .callServerStreamFromWorker<Q, S>(this.serviceId, path, req.toObject(), metadata?.toObject() ?? {})\n      .pipe(\n        tap(res => {\n          if (res instanceof GrpcDataEvent) {\n            res.data = new resclss(res.data as any);\n          }\n        }),\n      );\n  }\n\n  clientStream = () => {\n    throw new Error('Client streaming not supported');\n  };\n\n  bidiStream = () => {\n    throw new Error('Bidirectional streaming not supported');\n  };\n\n}\n","import { ModuleWithProviders, NgModule, Provider } from '@angular/core';\nimport { GRPC_CLIENT_FACTORY } from '@ngx-grpc/core';\nimport { GrpcWorkerClientFactory, GrpcWorkerClientSettings } from './grpc-worker-client';\nimport { GrpcWorkerGateway } from './grpc-worker-gateway';\nimport { GRPC_WORKER, GRPC_WORKER_CLIENT_DEFAULT_SETTINGS } from './tokens';\n\nexport interface GrpcWorkerClientRootOptions {\n  worker?: Worker;\n  settings?: GrpcWorkerClientSettings;\n}\n\nexport interface GrpcWorkerClientChildOptions {\n  worker?: Worker;\n  settings?: GrpcWorkerClientSettings;\n}\n\n@NgModule()\nexport class GrpcWorkerClientModule {\n\n  /**\n   * Create GrpcWorkerClientModule for using in AppModule (application root module)\n   * You can provide the options here instead of injecting corresponding tokens separately\n   */\n  public static forRoot(options?: GrpcWorkerClientRootOptions): ModuleWithProviders<GrpcWorkerClientModule> {\n    const providers: Provider[] = [\n      GrpcWorkerGateway,\n      { provide: GRPC_CLIENT_FACTORY, useClass: GrpcWorkerClientFactory },\n    ];\n\n    if (options?.worker) {\n      providers.push({ provide: GRPC_WORKER, useValue: options.worker });\n    }\n\n    if (options?.settings) {\n      providers.push({ provide: GRPC_WORKER_CLIENT_DEFAULT_SETTINGS, useValue: options.settings });\n    }\n\n    return { ngModule: GrpcWorkerClientModule, providers };\n  }\n\n  /**\n   * Create GrpcWorkerClientModule for using in children modules (incl. lazy modules)\n   * You can provide the options here instead of injecting corresponding tokens separately\n   */\n  public static forChild(options?: GrpcWorkerClientChildOptions): ModuleWithProviders<GrpcWorkerClientModule> {\n    const providers: Provider[] = [\n      GrpcWorkerGateway,\n      { provide: GRPC_CLIENT_FACTORY, useClass: GrpcWorkerClientFactory },\n    ];\n\n    if (options?.worker) {\n      providers.push({ provide: GRPC_WORKER, useValue: options.worker });\n    }\n\n    if (options?.settings) {\n      providers.push({ provide: GRPC_WORKER_CLIENT_DEFAULT_SETTINGS, useValue: options.settings });\n    }\n\n    return { ngModule: GrpcWorkerClientModule, providers };\n  }\n\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}