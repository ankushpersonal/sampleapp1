import { Inject, Injectable, Optional } from '@angular/core';
import { GrpcDataEvent, GrpcMetadata, GrpcStatusEvent } from '@ngx-grpc/common';
import { GrpcWebClientBase, MethodDescriptor } from 'grpc-web';
import { Observable } from 'rxjs';
import { GRPC_WEB_CLIENT_DEFAULT_SETTINGS } from './tokens';
import * as i0 from "@angular/core";
/**
 * GrpcClientFactory implementation based on grpc-web
 */
export class GrpcWebClientFactory {
    constructor(defaultSettings) {
        this.defaultSettings = defaultSettings;
    }
    createClient(serviceId, customSettings) {
        const settings = customSettings || this.defaultSettings;
        if (!settings) {
            throw new Error(`grpc-web client factory: no settings provided for ${serviceId}`);
        }
        return new GrpcWebClient({ ...settings });
    }
}
GrpcWebClientFactory.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: GrpcWebClientFactory, deps: [{ token: GRPC_WEB_CLIENT_DEFAULT_SETTINGS, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
GrpcWebClientFactory.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: GrpcWebClientFactory });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: GrpcWebClientFactory, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [GRPC_WEB_CLIENT_DEFAULT_SETTINGS]
                }] }]; } });
/**
 * GrpcClient implementation based on grpc-web
 */
export class GrpcWebClient {
    constructor(settings) {
        this.settings = settings;
        this.clientStream = () => {
            throw new Error('Client streaming not supported');
        };
        this.bidiStream = () => {
            throw new Error('Bidirectional streaming not supported');
        };
        this.client = new GrpcWebClientBase(this.settings);
    }
    getSettings() {
        return { ...this.settings };
    }
    unary(path, req, metadata, reqclss, resclss) {
        const descriptor = new MethodDescriptor(path, 'unary', reqclss, resclss, (request) => request.serializeBinary(), resclss.deserializeBinary);
        return new Observable(obs => {
            const stream = this.client.rpcCall(this.settings.host + path, req, metadata?.toObject() ?? {}, descriptor, (error, data) => {
                if (error) {
                    obs.next(new GrpcStatusEvent(error.code, error.message, new GrpcMetadata(error.metadata)));
                    obs.complete();
                }
                else {
                    obs.next(new GrpcDataEvent(data));
                }
            });
            // take only status 0 because unary error already includes non-zero statuses
            stream.on('status', status => status.code === 0 ? obs.next(new GrpcStatusEvent(status.code, status.details, new GrpcMetadata(status.metadata))) : null);
            stream.on('end', () => obs.complete());
            return () => stream.cancel();
        });
    }
    serverStream(path, req, metadata, reqclss, resclss) {
        const descriptor = new MethodDescriptor(path, 'server_streaming', reqclss, resclss, (request) => request.serializeBinary(), resclss.deserializeBinary);
        return new Observable(obs => {
            const stream = this.client.serverStreaming(this.settings.host + path, req, metadata?.toObject() ?? {}, descriptor);
            stream.on('status', status => obs.next(new GrpcStatusEvent(status.code, status.details, new GrpcMetadata(status.metadata))));
            stream.on('error', error => {
                obs.next(new GrpcStatusEvent(error.code, error.message, new GrpcMetadata(error.metadata)));
                obs.complete();
            });
            stream.on('data', data => obs.next(new GrpcDataEvent(data)));
            stream.on('end', () => obs.complete());
            return () => stream.cancel();
        });
    }
}
//# sourceMappingURL=data:application/json;base64,